# Copyright 2024 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

include "backend.conf"

appName = customs-declarations-information

application.logger.name = ${appName}

circuitBreaker.numberOfCallsToTriggerStateChange = 5
circuitBreaker.unavailablePeriodDurationInMillis = 1000
circuitBreaker.unstablePeriodDurationInMillis = 10000

# Fix SSL Engine closed already exceptions
http-verbs.retries.ssl-engine-closed-already.enabled = true

declarationStatus.requestDaysLimit = 90

bootstrap.http.headersAllowlist += "api-subscription-fields-id"
bootstrap.http.headersAllowlist += "X-Client-ID"

# Play Modules
# Provides an implementation of AuthConnector.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"

# ~~~~
# Additional play modules can be added here
play.modules.enabled += "uk.gov.hmrc.customs.declarations.information.config.CustomsDeclarationsInformationModule"
play.modules.enabled += "uk.gov.hmrc.customs.api.common.CustomsApiCommonModule"

# The application languages
play.i18n.langs = ["en"]

play.http.errorHandler = "uk.gov.hmrc.customs.api.common.config.CustomsErrorHandler"

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and 
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule. 

internal.clientIds.0 = "ABC123"

controllers {
  com.kenshoo.play.metrics.MetricsController = {
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.customs.declarations.information.controllers.InformationDocumentationController = {
    needsLogging = false
    needsAuditing = false
  }
}

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  enabled = true
}

auditing {
  enabled = false

  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

microservice {

  services {

    auth {
      host = localhost
      port = 9479
    }

    datastream {
      host = localhost
      port = 8100
    }

    declaration-status {
      host = localhost
      port = 9479
      bearer-token = "real"
      context = /declarations/querystatusinformation/v1

      stub {
        host = localhost
        port = 9478
        bearer-token = "real"
        context = /declarations/querystatusinformation/v1
      }
    }

    declaration-version {
      host = localhost
      port = 9479
      bearer-token = "real"
      context = /declarations/retrievedeclarationversion/v1

      stub {
        host = localhost
        port = 9478
        bearer-token = "real"
        context = /declarations/retrievedeclarationversion/v1
      }
    }

    declaration-search {
      host = localhost
      port = 9479
      bearer-token = "real"
      context = /declarations/retrievedeclarationsummarydata/v1

      stub {
        host = localhost
        port = 9478
        bearer-token = "real"
        context = /declarations/retrievedeclarationsummarydata/v1
      }
    }

    declaration-full {
      host = localhost
      port = 9479
      bearer-token = "real"
      context = /declarations/retrievefulldeclarationdata/v1

      stub {
        host = localhost
        port = 9478
        bearer-token = "real"
        context = /declarations/retrievefulldeclarationdata/v1
      }
    }
  
    v2 {
      declaration-status {
        host = localhost
        port = 9479
        bearer-token = "real"
        context = /declarations/querystatusinformation/v1

        stub {
          host = localhost
          port = 9478
          bearer-token = "real"
          context = /declarations/querystatusinformation/v1
        }
      }

      declaration-version {
        host = localhost
        port = 9479
        bearer-token = "real"
        context = /declarations/retrievedeclarationversion/v1

        stub {
          host = localhost
          port = 9478
          bearer-token = "real"
          context = /declarations/retrievedeclarationversion/v1
        }
      }
      
      declaration-search {
        host = localhost
        port = 9479
        bearer-token = "real"
        context = /declarations/retrievedeclarationsummarydata/v1

        stub {
          host = localhost
          port = 9478
          bearer-token = "real"
          context = /declarations/retrievedeclarationsummarydata/v1
        }
      }

      declaration-full {
        host = localhost
        port = 9479
        bearer-token = "real"
        context = /declarations/retrievefulldeclarationdata/v1

        stub {
          host = localhost
          port = 9478
          bearer-token = "real"
          context = /declarations/retrievefulldeclarationdata/v1
        }
      }
    }

    api-subscription-fields {
      host = localhost
      port = 9650
      context = /field
    }
  }
}
